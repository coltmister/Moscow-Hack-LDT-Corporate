import uuid

from django.contrib.postgres.fields import ArrayField
from django.db import models
from django.db.models import JSONField, CheckConstraint, Q, F

from core.models import AbstractBase
from users.models import User


# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è –ò–¥–µ–π ---
# models.CharField.register_lookup(search)
# models.TextField.register_lookup(search)


class Idea(AbstractBase):
    STATUS_CREATED = 'created'
    STATUS_ON_MODERATION = 'on_moderation'
    STATUS_NEED_WORK = 'need_work'
    STATUS_REJECTED = 'cancelled'
    STATUS_APPROVED = 'approved'
    STATUS_FINISHED = 'finished'

    STATUS_CHOICES = (
        (STATUS_CREATED, '–°–æ–∑–¥–∞–Ω–∞'),
        (STATUS_ON_MODERATION, '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'),
        (STATUS_NEED_WORK, '–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'),
        (STATUS_REJECTED, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'),
        (STATUS_APPROVED, '–û–¥–æ–±—Ä–µ–Ω–∞'),
        (STATUS_FINISHED, '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'),
    )

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    title = models.CharField(max_length=255, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    idea_json = JSONField(verbose_name='JSON –∏–¥–µ–∏', null=True, blank=True)
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='ideas')
    status = models.CharField(max_length=255, choices=STATUS_CHOICES, default=STATUS_CREATED, verbose_name='–°—Ç–∞—Ç—É—Å')
    category = models.ManyToManyField('IdeaCategory', verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', related_name='ideas', blank=True)
    tags = models.ManyToManyField('users.Interest', verbose_name='–¢–µ–≥–∏', blank=True)
    rating = models.IntegerField(default=0, verbose_name='–†–µ–π—Ç–∏–Ω–≥')
    subscribers = models.ManyToManyField(User, related_name='subscribe_ideas', verbose_name='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏', blank=True)
    links = ArrayField(models.URLField(), blank=True, null=True, verbose_name='–°—Å—ã–ª–∫–∏')

    def save(self, *args, **kwargs):
        is_new = self._state.adding
        super().save(*args, **kwargs)
        if is_new:
            IdeaSettings.objects.create(idea=self)
            IdeaInformation.objects.create(idea=self)
        return self

    def approve(self, message):
        self.status = self.STATUS_APPROVED
        IdeaStatusHistory.objects.create(idea=self, old_status=self.status, new_status=self.STATUS_APPROVED,
                                         comment=message)
        self.save()

    def reject(self, message):
        self.status = self.STATUS_REJECTED
        IdeaStatusHistory.objects.create(idea=self, old_status=self.status, new_status=self.STATUS_REJECTED,
                                         comment=message)
        self.save()

    def need_work(self, message):
        self.status = self.STATUS_NEED_WORK
        IdeaStatusHistory.objects.create(idea=self, old_status=self.status, new_status=self.STATUS_NEED_WORK,
                                         comment=message)
        self.save()

    def on_moderation(self, message):
        self.status = self.STATUS_ON_MODERATION
        IdeaStatusHistory.objects.create(idea=self, old_status=self.status, new_status=self.STATUS_ON_MODERATION,
                                         comment=message)
        self.save()

    def finished(self, message):
        self.status = self.STATUS_FINISHED
        IdeaStatusHistory.objects.create(idea=self, old_status=self.status, new_status=self.STATUS_FINISHED,
                                         comment=message)
        self.save()

    def __str__(self):
        return self.title

    def get_last_post(self):
        return self.posts.order_by('-created_at').first()

    class Meta:
        verbose_name = '–ò–¥–µ—è'
        verbose_name_plural = '–ò–¥–µ–∏'
        ordering = ['-created_at']


class IdeaStatusHistory(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    idea = models.ForeignKey(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è')
    old_status = models.CharField(max_length=255, verbose_name='–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å')
    new_status = models.CharField(max_length=255, verbose_name='–ù–æ–≤—ã–π –°—Ç–∞—Ç—É—Å')
    comment = models.TextField(verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', blank=True, null=True)

    def __str__(self):
        return f'{self.idea} - {self.old_status} -> {self.new_status}'

    class Meta:
        verbose_name = '–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–¥–µ–∏'
        verbose_name_plural = '–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–¥–µ–π'


class IdeaInformation(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    idea = models.OneToOneField(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='information')
    progress = models.IntegerField(default=0, verbose_name='–ü—Ä–æ–≥—Ä–µ—Å—Å')
    budget = models.IntegerField(default=0, verbose_name='–ë—é–¥–∂–µ—Ç')

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self.progress == 100:
            self.idea.status = self.idea.STATUS_FINISHED
            self.idea.save()
        return self


class Meta:
    verbose_name = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–¥–µ–∏'
    verbose_name_plural = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–¥–µ—è—Ö'
    ordering = ['-created_at']


class IdeaComment(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='idea_comments')
    idea = models.ForeignKey(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='comments')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', related_name='children')

    def __str__(self):
        return self.text

    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–¥–µ–∏'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∏–¥–µ—è–º'
        ordering = ['-created_at']
        constraints = [
            CheckConstraint(
                check=~Q(parent=F('id')),
                name='parent_row_not_equal_to_self'
            )]


class IdeaLike(AbstractBase):
    SUPER_LIKE = 'super_like'
    LIKE = 'like'
    NEUTRAL = 'neutral'
    DISLIKE = 'dislike'
    SUPER_DISLIKE = 'super_dislike'

    LIKES_CHOICES = (
        (SUPER_LIKE, "ü•∞"),
        (LIKE, "‚ù§Ô∏è"),
        (NEUTRAL, "üòê"),
        (DISLIKE, "üíî"),
        (SUPER_DISLIKE, "ü§®"),
    )

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    value = models.CharField(max_length=255, choices=LIKES_CHOICES, default='like', verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='likes')
    idea = models.ForeignKey(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='likes')

    def __str__(self):
        return self.idea.title

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        if self.value == self.SUPER_LIKE:
            self.idea.rating += 2
        elif self.value == self.LIKE:
            self.idea.rating += 1
        elif self.value == self.DISLIKE:
            self.idea.rating -= 1
        elif self.value == self.SUPER_DISLIKE:
            self.idea.rating -= 2
        self.idea.save()

    def delete(self, *args, **kwargs):
        if self.value == self.SUPER_LIKE:
            self.idea.rating -= 2
        elif self.value == self.LIKE:
            self.idea.rating -= 1
        elif self.value == self.DISLIKE:
            self.idea.rating += 1
        elif self.value == self.SUPER_DISLIKE:
            self.idea.rating += 2
        self.idea.save()
        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = '–õ–∞–π–∫'
        verbose_name_plural = '–õ–∞–π–∫–∏'
        ordering = ['-created_at']


class IdeaCategory(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    idea_count = models.IntegerField(default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        ordering = ['-created_at']


class IdeaSettings(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    idea = models.OneToOneField(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='settings')
    is_public = models.BooleanField(default=True, verbose_name='–ü—É–±–ª–∏—á–Ω–∞—è')
    is_commentable = models.BooleanField(default=True, verbose_name='–ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º–∞—è')

    def __str__(self):
        return self.idea.title

    class Meta:
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–¥–µ–∏'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–¥–µ–∏'
        ordering = ['-created_at']


class IdeaDocument(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    path = models.CharField(max_length=255, verbose_name='–ü—É—Ç—å')
    idea = models.ForeignKey(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='documents')

    def __str__(self):
        return self.path

    class Meta:
        verbose_name = '–î–æ–∫—É–º–µ–Ω—Ç'
        verbose_name_plural = '–î–æ–∫—É–º–µ–Ω—Ç—ã'
        ordering = ['-created_at']


# ------------------------------ –ú–æ–¥–µ–ª–∏ –ü–æ—Å—Ç–æ–≤ ------------------------------

class Post(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    idea = models.ForeignKey(Idea, on_delete=models.CASCADE, verbose_name='–ò–¥–µ—è', related_name='posts')
    title = models.CharField(max_length=255, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    post_json = models.JSONField(verbose_name='JSON –ø–æ—Å—Ç–∞', blank=True, null=True)
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='posts')
    rating = models.IntegerField(default=0, verbose_name='–†–µ–π—Ç–∏–Ω–≥')

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = '–ü–æ—Å—Ç'
        verbose_name_plural = '–ü–æ—Å—Ç—ã'
        ordering = ['-created_at']


class PostLike(AbstractBase):
    SUPER_LIKE = 'super_like'
    LIKE = 'like'
    NEUTRAL = 'neutral'
    DISLIKE = 'dislike'
    SUPER_DISLIKE = 'super_dislike'

    LIKES_CHOICES = (
        (SUPER_LIKE, "ü•∞"),
        (LIKE, "‚ù§Ô∏è"),
        (NEUTRAL, "üòê"),
        (DISLIKE, "üíî"),
        (SUPER_DISLIKE, "ü§®"),
    )

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    value = models.CharField(max_length=255, choices=LIKES_CHOICES, default='like', verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='post_likes')
    post = models.ForeignKey(Post, on_delete=models.CASCADE, verbose_name='–ü–æ—Å—Ç', related_name='likes')

    def __str__(self):
        return self.post.title

    def save(self, *args, **kwargs):
        if self.value == self.SUPER_LIKE:
            self.post.rating += 2
        elif self.value == self.LIKE:
            self.post.rating += 1
        elif self.value == self.DISLIKE:
            self.post.rating -= 1
        elif self.value == self.SUPER_DISLIKE:
            self.post.rating -= 2
        self.post.save()

        super().save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        if self.value == self.SUPER_LIKE:
            self.post.rating -= 2
        elif self.value == self.LIKE:
            self.post.rating -= 1
        elif self.value == self.DISLIKE:
            self.post.rating += 1
        elif self.value == self.SUPER_DISLIKE:
            self.post.rating += 2
        self.post.save()
        super().delete(*args, **kwargs)

    class Meta:
        verbose_name = '–õ–∞–π–∫ –ø–æ—Å—Ç–∞'
        verbose_name_plural = '–õ–∞–π–∫–∏ –ø–æ—Å—Ç–æ–≤'
        ordering = ['-created_at']


class PostComment(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç')
    author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', related_name='post_comments')
    post = models.ForeignKey(Post, on_delete=models.CASCADE, verbose_name='–ü–æ—Å—Ç', related_name='comments')
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True,
                               verbose_name='–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', related_name='children')

    def __str__(self):
        return self.text

    class Meta:
        verbose_name = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
        verbose_name_plural = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'
        ordering = ['-created_at']
        constraints = [
            CheckConstraint(
                check=~Q(parent=F('id')),
                name='parent_row_not_equal_to_self_posts'
            )]


class PostDocument(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name='ID')
    path = models.CharField(max_length=255, verbose_name='–ü—É—Ç—å')
    post = models.ForeignKey(Post, on_delete=models.CASCADE, verbose_name='–ü–æ—Å—Ç', related_name='documents')

    def __str__(self):
        return self.path

    class Meta:
        verbose_name = '–î–æ–∫—É–º–µ–Ω—Ç –ø–æ—Å—Ç–∞'
        verbose_name_plural = '–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤'
        ordering = ['-created_at']
