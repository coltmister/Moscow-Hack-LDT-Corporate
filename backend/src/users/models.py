import uuid

from django.db import models

from core.models import AbstractBase
from django.core.validators import MaxValueValidator, MinValueValidator


class User(AbstractBase):
    id = models.UUIDField(primary_key=True, verbose_name="ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    username = models.CharField(max_length=255, verbose_name="Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", unique=True)
    name = models.CharField(max_length=255, verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    surname = models.CharField(max_length=255, verbose_name="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    patronymic = models.CharField(max_length=255, verbose_name="–û—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", null=True, blank=True)
    email = models.EmailField(verbose_name="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", unique=True)
    is_active = models.BooleanField(default=True, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω?")
    is_admin = models.BooleanField(default=False, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?")
    is_verified = models.BooleanField(default=False, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω?")

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.id}. üåù {self.username} {self.surname} {self.name} {self.patronymic} {self.email} {self.is_active}"

    @property
    def snp(self):
        user_patronymic = self.patronymic or ""
        return f'{self.surname} {self.name} {user_patronymic}'.strip()

    @property
    def avatar(self):
        return self.profile.avatar

    @property
    def avatar_thumbnail(self):
        return self.profile.avatar_thumbnail

    def get_greeting_name(self):
        greeting_name = f"{self.name} {self.patronymic}" if self.patronymic else f"{self.name}"
        return greeting_name


class SocialNetwork(AbstractBase):
    """
    –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–æ–≤ –∏ —Å–æ—Ü. —Å–µ—Ç–µ–π,
    —Å—Ç–æ–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏–Ω+—Å–æ—Ü.—Å–µ—Ç—å –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    """
    NETWORK_TYPE = [
        ('–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ'),
        ('Telegram', 'Telegram'),
        ('Instagram', 'Instagram'),
        ('Facebook', 'Facebook'),
        ('YouTube', 'YouTube'),
        ('Twitter', 'Twitter'),
        ('LinkedIn', 'LinkedIn'),
        ('Google', 'Google'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID —Å–æ—Ü. —Å–µ—Ç–∏")
    network_type = models.CharField(max_length=10, choices=NETWORK_TYPE, verbose_name='–¢–∏–ø —Å–æ—Ü.—Å–µ—Ç–∏')
    nickname = models.CharField(max_length=120, verbose_name="–ù–∏–∫–Ω–µ–π–º –≤ —Å–æ—Ü. —Å–µ—Ç–∏")
    user_profile = models.ForeignKey('UserProfile', on_delete=models.CASCADE, verbose_name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                     related_name='social_networks')

    class Meta:
        verbose_name = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
        verbose_name_plural = "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
        constraints = [
            models.UniqueConstraint(fields=['network_type', 'nickname'], name='unique_social_network')
        ]

    def __str__(self):
        return f"[{self.id}] {self.user_profile.user.snp} -> {self.nickname}"


class ProfileSettings(AbstractBase):
    """
    –¢–∞–±–ª–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤
    """
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
    show_birthdate = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –î–†?")
    show_sex = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª?")
    show_biography = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é?")
    show_phone = models.BooleanField(default=False, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å–Ω. —Ç–µ–ª–µ—Ñ–æ–Ω?")
    show_email = models.BooleanField(default=False, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Å–Ω. –ø–æ—á—Ç—É?")
    show_social_networks = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Ü. —Å–µ—Ç–∏?")
    show_skills = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏?")
    show_interests = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã?")

    show_citizenship = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?")
    show_education = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?")
    show_employment = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?")
    show_work_experience = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?")
    show_professional_experience = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏?")
    show_team_roles = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö?")
    show_iar_information = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –†–ò–î?")
    show_company_information = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏?")
    show_hack_experience = models.BooleanField(default=True, verbose_name="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø—ã—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö?")

    can_be_invited = models.BooleanField(default=True, verbose_name="–ú–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –≥—Ä—É–ø–ø—É?")

    class Meta:
        verbose_name = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        verbose_name_plural = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"

    def __str__(self):
        return f"[{self.id}] {self.profile}"


class Skill(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –Ω–∞–≤—ã–∫–∞")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞")
    weight = models.IntegerField(default=0, verbose_name="–í–µ—Å –Ω–∞–≤—ã–∫–∞")
    parent = models.ForeignKey('self', on_delete=models.CASCADE, verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –Ω–∞–≤—ã–∫", null=True,
                               blank=True)

    class Meta:
        verbose_name = "–ù–∞–≤—ã–∫"
        verbose_name_plural = "–ù–∞–≤—ã–∫–∏"

    def __str__(self):
        return f"[{self.id}] {self.name}"


class Interest(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –∏–Ω—Ç–µ—Ä–µ—Å–∞")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞")
    weight = models.IntegerField(default=0, verbose_name="–í–µ—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞")
    parent = models.ForeignKey('self', on_delete=models.CASCADE, verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å", null=True,
                               blank=True)
    chat = models.ForeignKey('chats.Chat', on_delete=models.CASCADE, verbose_name="–ß–∞—Ç", related_name='interest',
                             null=True,
                             blank=True)

    class Meta:
        verbose_name = "–ò–Ω—Ç–µ—Ä–µ—Å"
        verbose_name_plural = "–ò–Ω—Ç–µ—Ä–µ—Å—ã"

    def __str__(self):
        return f"[{self.id}] {self.name}"

    def save(self, *args, **kwargs):
        from chats.views import create_interest_chat
        is_new = self._state.adding
        super().save(*args, **kwargs)
        if is_new:
            create_interest_chat.apply_async(kwargs={"interest_pk": str(self.id)}, countdown=5)
        else:
            if not self.chat:
                create_interest_chat.apply_async(kwargs={"interest_pk": str(self.id)}, countdown=5)
        return self


class UserProfile(AbstractBase):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –¥–æ–ø. –ø–æ–ª—è–º–∏
    - –°–æ—Ü. —Å–µ—Ç–∏
    - –¢–µ–ª–µ—Ñ–æ–Ω—ã
    - –ü–æ—á—Ç—ã
    - –†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏
    """
    MALE = 'male'
    FEMALE = 'female'
    SEX = [
        (MALE, '–ú—É–∂—Å–∫–æ–π'),
        (FEMALE, '–ñ–µ–Ω—Å–∫–∏–π'),
    ]
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    user = models.OneToOneField(User, on_delete=models.CASCADE, blank=True, null=True, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                related_name="profile")
    status = models.CharField(max_length=255, blank=True, null=True, verbose_name="–°—Ç–∞—Ç—É—Å —á–µ–ª–æ–≤–µ–∫–∞")
    avatar = models.URLField(max_length=2048, blank=True, null=True, verbose_name="–ê–≤–∞—Ç–∞—Ä")
    avatar_thumbnail = models.URLField(max_length=2048, blank=True,
                                       null=True, unique=True, verbose_name="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞")
    biography = models.TextField(blank=True, null=True, verbose_name="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è")

    phone = models.CharField(max_length=20, verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
                             unique=True, null=True, blank=True)
    birthdate = models.DateField(verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", null=True, blank=True)

    sex = models.CharField(max_length=10, verbose_name="–ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", choices=[('female', '–ñ–µ–Ω'), ('male', '–ú—É–∂')],
                           null=True, blank=True)

    profile_settings = models.OneToOneField(ProfileSettings, blank=True, null=True, on_delete=models.CASCADE,
                                            verbose_name="–ö–∞–∫–∏–µ –ø–æ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?", related_name="profile")
    skills = models.ManyToManyField(Skill, blank=True, verbose_name="–ù–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    interests = models.ManyToManyField(Interest, blank=True, verbose_name="–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    class Meta:
        verbose_name = "–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        verbose_name_plural = "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    def save(self, *args, **kwargs):
        if self.profile_settings is None:
            self.profile_settings = ProfileSettings.objects.create()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"[{self.user}]"


class Country(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID —Å—Ç—Ä–∞–Ω—ã")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
    country_code = models.CharField(max_length=255, verbose_name="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã")

    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∞"
        verbose_name_plural = "–°—Ç—Ä–∞–Ω—ã"

    def __str__(self):
        return f"[{self.id}] {self.name}"


class University(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")
    rating = models.IntegerField(default=0, verbose_name="–†–µ–π—Ç–∏–Ω–≥ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞")

    class Meta:
        verbose_name = "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"
        verbose_name_plural = "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã"

    def __str__(self):
        return f"[{self.id}] {self.name}"


class TeamRole(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID —Ä–æ–ª–∏")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏")
    weight = models.IntegerField(default=0, verbose_name="–í–µ—Å —Ä–æ–ª–∏")

    class Meta:
        verbose_name = "–†–æ–ª—å"
        verbose_name_plural = "–†–æ–ª–∏"

    def __str__(self):
        return f"[{self.id}] {self.name}"


class UserAddInfo(AbstractBase):
    """
    –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    FULL = 0
    PART = 1
    PROJECT = 2
    VOLUNTEER = 3
    TRAINEE = 4
    BUSINESS = 5
    SELF_EMPLOYED = 6
    UNEMPLOYED = 7

    EMPLOYMENT = (
        (FULL, '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å'),
        (PART, '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å'),
        (PROJECT, '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞'),
        (VOLUNTEER, '–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ'),
        (TRAINEE, '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'),
        (BUSINESS, '–°–≤–æ–π –±–∏–∑–Ω–µ—Å'),
        (SELF_EMPLOYED, '–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π'),
        (UNEMPLOYED, '–ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π'),

    )

    BASIC_GENERAL_EDUCATION = 0
    SECONDARY_SCHOOL = 1
    LOWER_POST_SECONDARY_VOCATIONAL_EDUCATION = 2
    INCOMPLETE_HIGHER_EDUCATION = 3
    BACHELOR = 4
    SPECIALIST = 5
    MASTER = 6
    POSTGRADUATE = 7
    PHD = 8

    EDUCATION_LEVEL = (
        (BASIC_GENERAL_EDUCATION, '–°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (9 –∫–ª–∞—Å—Å–æ–≤)'),
        (SECONDARY_SCHOOL, '–°—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (11 –∫–ª–∞—Å—Å–æ–≤)'),
        (LOWER_POST_SECONDARY_VOCATIONAL_EDUCATION, '–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
        (INCOMPLETE_HIGHER_EDUCATION, '–ù–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'),
        (BACHELOR, '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç'),
        (SPECIALIST, '–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç'),
        (MASTER, '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞'),
        (POSTGRADUATE, '–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'),
        (PHD, '–î–æ–∫—Ç–æ—Ä–∞–Ω—Ç—É—Ä–∞'),

    )
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –∑–∞—è–≤–∫–∏")
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", related_name="add_info")
    citizenship = models.ForeignKey(Country, on_delete=models.SET_NULL, blank=True, null=True,
                                    verbose_name="–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
    education_university = models.ForeignKey(University, on_delete=models.SET_NULL, blank=True, null=True,
                                             verbose_name="–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
    education_level = models.IntegerField(default=BACHELOR, verbose_name="–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", choices=EDUCATION_LEVEL)
    education_speciality = models.CharField(max_length=255, blank=True, null=True, verbose_name="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
    education_end_year = models.IntegerField(blank=True, null=True, verbose_name="–ì–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è")
    employment = models.IntegerField(choices=EMPLOYMENT, default=FULL, blank=True, null=True, verbose_name="–ó–∞–Ω—è—Ç–æ—Å—Ç—å")
    work_experience = models.IntegerField(blank=True, null=True, verbose_name="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
                                          validators=[MaxValueValidator(60)])
    professional_experience = models.TextField(blank=True, null=True, verbose_name="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç")
    team_role = models.ManyToManyField(TeamRole, blank=True, verbose_name="–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ")
    has_iar = models.BooleanField(default=False, verbose_name="–ù–∞–ª–∏—á–∏–µ –†–ò–î")
    has_own_company = models.BooleanField(default=False, verbose_name="–ù–∞–ª–∏—á–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
    hack_experience = models.IntegerField(blank=True, null=True, verbose_name="–û–ø—ã—Ç —É—á–∞—Å—Ç–∏—è –≤ —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö",
                                          validators=[MaxValueValidator(60)])

    class Meta:
        verbose_name = "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
        verbose_name_plural = "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"

    def __str__(self):
        return f"[{self.id}] {self.user}"
