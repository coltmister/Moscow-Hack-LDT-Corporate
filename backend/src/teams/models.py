import uuid

from django.db import models

from core.models import AbstractBase
from users.models import TeamRole, User


class RequiredMembers(AbstractBase):
    team = models.ForeignKey('teams.Team',
                             on_delete=models.CASCADE,
                             verbose_name='–ö–æ–º–∞–Ω–¥–∞')
    role = models.ForeignKey('users.TeamRole',
                             on_delete=models.CASCADE,
                             verbose_name="–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ")
    amount = models.IntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –¥–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é", default=1)

    def __str__(self):
        return f'{self.team} - {self.role} - {self.amount}'
    class Meta:
        verbose_name = "–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ"
        verbose_name_plural = "–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ"
        constraints = [
            models.UniqueConstraint(fields=['role', 'team'], name="team_role_unique")
        ]
        ordering = ['-created_at']


class Team(AbstractBase):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –ö–æ–º–∞–Ω–¥—ã")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", unique=True)
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", null=True, blank=True)
    idea = models.OneToOneField('ideas.Idea',
                                on_delete=models.CASCADE,
                                verbose_name="–ò–¥–µ—è", related_name="team")
    members = models.ManyToManyField('users.User',
                                     verbose_name="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã",
                                     related_name='teams',
                                     through='Membership',
                                     through_fields=('team', 'user'))
    team_leader = models.ForeignKey('users.User',
                                    verbose_name="–õ–∏–¥–µ—Ä –∫–æ–º–∞–Ω–¥—ã",
                                    related_name='team_leader',
                                    on_delete=models.CASCADE)
    is_looking_for_members = models.BooleanField(default=True, verbose_name="–ò—â–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?")
    required_members = models.ManyToManyField('users.TeamRole',
                                              verbose_name="–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                                              related_name='required_roles',
                                              through='RequiredMembers')
    chat = models.OneToOneField('chats.Chat',
                                on_delete=models.SET_NULL,
                                verbose_name="–ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã",
                                null=True,
                                blank=True,
                                related_name='team_chat')

    class Meta:
        verbose_name = "–ö–æ–º–∞–Ω–¥–∞"
        verbose_name_plural = "–ö–æ–º–∞–Ω–¥—ã"
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.id}. üåù {self.name}"


class Membership(AbstractBase):
    AUTOMATIC = 0
    USER = 1
    TEAM = 2
    ADMINISTRATOR = 3

    MEMBERSHIP_INITIATOR = (
        (AUTOMATIC, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'),
        (USER, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
        (TEAM, '–ö–æ–º–∞–Ω–¥–∞'),
        (ADMINISTRATOR, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),

    )

    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    team = models.ForeignKey(Team, on_delete=models.CASCADE, verbose_name="–ö–æ–º–∞–Ω–¥–∞")
    date_joined = models.DateField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
    membership_requester = models.IntegerField(choices=MEMBERSHIP_INITIATOR, verbose_name="–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —á–ª–µ–Ω—Å—Ç–≤–∞")
    role = models.ForeignKey(TeamRole, on_delete=models.CASCADE, verbose_name="–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ", null=True, blank=True)

    def __str__(self):
        return f'{self.user} - {self.team} - {self.date_joined} - {self.role}'
    class Meta:
        verbose_name = "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–º–∞–Ω–¥–µ"
        verbose_name_plural = "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–º–∞–Ω–¥–µ"
        constraints = [
            models.UniqueConstraint(fields=['user', 'team'], name="user_team_unique")
        ]
        ordering = ['-created_at']


class TeamRequest(AbstractBase):
    INCOMING = 0
    OUTGOING = 1

    REQUEST_TYPE = (
        (INCOMING, '–í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å'),
        (OUTGOING, '–ò—Å—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å'),
    )

    REQUEST_SUBMITTED = 0
    REQUEST_ACCEPTED = 1
    REQUEST_DECLINED = 2

    REQUEST_STATUS = (
        (REQUEST_SUBMITTED, '–ü–æ–¥–∞–Ω–∞'),
        (REQUEST_ACCEPTED, '–ü—Ä–∏–Ω—è—Ç–∞'),
        (REQUEST_DECLINED, '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'),
    )

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, verbose_name="ID –ó–∞—è–≤–∫–∏")
    team = models.ForeignKey(Team, verbose_name="–ö–æ–º–∞–Ω–¥–∞", related_name='team_requests', on_delete=models.CASCADE)
    user = models.ForeignKey('users.User', verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", related_name='user_requests',
                             on_delete=models.CASCADE)
    role = models.ForeignKey(TeamRole, on_delete=models.CASCADE, verbose_name="–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                             related_name='user_role_requests')
    request_type = models.PositiveSmallIntegerField(choices=REQUEST_TYPE, verbose_name="–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞")
    cover_letter = models.TextField(verbose_name="–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", null=True, blank=True)
    request_status = models.IntegerField(verbose_name="–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞", default=REQUEST_SUBMITTED,
                                         choices=REQUEST_STATUS)

    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞"
        verbose_name_plural = "–ó–∞—è–≤–∫–∏"
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.id}. üåù {self.team} {self.user} {self.request_type} {self.request_status}"
